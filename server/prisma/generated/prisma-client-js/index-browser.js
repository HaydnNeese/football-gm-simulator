
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
Prisma.prismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.PlayerScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  age: 'age',
  college: 'college',
  heightInInches: 'heightInInches',
  weightInPounds: 'weightInPounds',
  teamId: 'teamId',
  practiceSquadTeamId: 'practiceSquadTeamId',
  injuredReserveTeamId: 'injuredReserveTeamId',
  suspendedListTeamId: 'suspendedListTeamId',
  currentContractId: 'currentContractId',
  agentId: 'agentId',
  ratingsId: 'ratingsId',
  statsId: 'statsId',
  position: 'position',
  expectedRole: 'expectedRole',
  actualRole: 'actualRole',
  recordsHeld: 'recordsHeld',
  currentInjury: 'currentInjury',
  injuryHistory: 'injuryHistory',
  personalityTraits: 'personalityTraits',
  offFieldConcerns: 'offFieldConcerns',
  pastEvents: 'pastEvents',
  isStarter: 'isStarter',
  isCaptain: 'isCaptain',
  isFreeAgent: 'isFreeAgent',
  isRetired: 'isRetired',
  isSuspended: 'isSuspended',
  isPracticeSquad: 'isPracticeSquad',
  isTradeBlock: 'isTradeBlock',
  offense: 'offense',
  defense: 'defense',
  specialTeams: 'specialTeams',
  draftYear: 'draftYear',
  draftRound: 'draftRound',
  isRecordHolder: 'isRecordHolder',
  contractDesiresId: 'contractDesiresId',
  contractNegotiationStatus: 'contractNegotiationStatus',
  lastContractUpdate: 'lastContractUpdate',
  performanceRating: 'performanceRating',
  impactRating: 'impactRating',
  potential: 'potential',
  experience: 'experience',
  isInjured: 'isInjured',
  injuryProneness: 'injuryProneness',
  expectedReturnFromInjury: 'expectedReturnFromInjury',
  morale: 'morale',
  leadership: 'leadership',
  adaptability: 'adaptability',
  workEthic: 'workEthic',
  consistency: 'consistency',
  clutchFactor: 'clutchFactor',
  footballIQ: 'footballIQ',
  popularity: 'popularity',
  trainingFocus: 'trainingFocus',
  trainingProgress: 'trainingProgress',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TeamScalarFieldEnum = {
  id: 'id',
  name: 'name',
  nickname: 'nickname',
  location: 'location',
  abbreviation: 'abbreviation',
  logoUrl: 'logoUrl',
  division: 'division',
  conference: 'conference',
  overallRating: 'overallRating',
  offensiveScheme: 'offensiveScheme',
  defensiveScheme: 'defensiveScheme',
  teamNeeds: 'teamNeeds',
  wins: 'wins',
  losses: 'losses',
  ties: 'ties',
  currentStreak: 'currentStreak',
  longestWinningStreak: 'longestWinningStreak',
  playoffAppearances: 'playoffAppearances',
  superBowlAppearances: 'superBowlAppearances',
  championships: 'championships',
  capSpace: 'capSpace',
  capLimit: 'capLimit',
  totalPayroll: 'totalPayroll',
  financialHealth: 'financialHealth',
  yearFounded: 'yearFounded',
  allTimeWins: 'allTimeWins',
  allTimeLosses: 'allTimeLosses',
  allTimeTies: 'allTimeTies',
  retiredNumbers: 'retiredNumbers',
  fanBaseSize: 'fanBaseSize',
  prestige: 'prestige',
  rivalTeams: 'rivalTeams'
};

exports.Prisma.PlayerContractScalarFieldEnum = {
  id: 'id',
  playerId: 'playerId',
  teamId: 'teamId',
  signedDate: 'signedDate',
  startSeason: 'startSeason',
  endSeason: 'endSeason',
  totalValue: 'totalValue',
  averagePerYear: 'averagePerYear',
  totalGuaranteed: 'totalGuaranteed',
  isRookieContract: 'isRookieContract',
  isFranchiseTag: 'isFranchiseTag',
  isExtension: 'isExtension',
  isPlayerOptOut: 'isPlayerOptOut',
  isTeamOptOut: 'isTeamOptOut',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContractBonusScalarFieldEnum = {
  id: 'id',
  contractId: 'contractId',
  year: 'year',
  signingBonus: 'signingBonus',
  rosterBonus: 'rosterBonus',
  workoutBonus: 'workoutBonus',
  incentiveBonus: 'incentiveBonus'
};

exports.Prisma.SalaryByYearScalarFieldEnum = {
  id: 'id',
  contractId: 'contractId',
  year: 'year',
  amount: 'amount'
};

exports.Prisma.CapHitByYearScalarFieldEnum = {
  id: 'id',
  contractId: 'contractId',
  year: 'year',
  amount: 'amount'
};

exports.Prisma.DeadCapByYearScalarFieldEnum = {
  id: 'id',
  contractId: 'contractId',
  year: 'year',
  amount: 'amount'
};

exports.Prisma.OptOutYearScalarFieldEnum = {
  id: 'id',
  contractId: 'contractId',
  year: 'year'
};

exports.Prisma.RestructureEventScalarFieldEnum = {
  id: 'id',
  contractId: 'contractId',
  year: 'year',
  date: 'date',
  amountConvertedToBonus: 'amountConvertedToBonus',
  newCapHit: 'newCapHit',
  newDeadCap: 'newDeadCap'
};

exports.Prisma.ContractClauseScalarFieldEnum = {
  id: 'id',
  contractId: 'contractId',
  noTradeClause: 'noTradeClause',
  injuryGuarantee: 'injuryGuarantee',
  restructureEligible: 'restructureEligible',
  earlyTerminationPenalty: 'earlyTerminationPenalty',
  performanceBonusId: 'performanceBonusId',
  rosterBonusId: 'rosterBonusId',
  workoutBonusId: 'workoutBonusId',
  optionBonusId: 'optionBonusId'
};

exports.Prisma.PerformanceBonusScalarFieldEnum = {
  id: 'id',
  clauseId: 'clauseId',
  proBowl: 'proBowl',
  allPro: 'allPro',
  mvp: 'mvp',
  superBowlMVP: 'superBowlMVP',
  playoffAppearance: 'playoffAppearance'
};

exports.Prisma.StatMilestoneScalarFieldEnum = {
  id: 'id',
  performanceId: 'performanceId',
  yards: 'yards',
  touchdowns: 'touchdowns',
  sacks: 'sacks',
  interceptions: 'interceptions'
};

exports.Prisma.RosterBonusScalarFieldEnum = {
  id: 'id',
  clauseId: 'clauseId',
  amount: 'amount',
  perGame: 'perGame'
};

exports.Prisma.WorkoutBonusScalarFieldEnum = {
  id: 'id',
  clauseId: 'clauseId',
  amount: 'amount',
  minWorkouts: 'minWorkouts'
};

exports.Prisma.OptionBonusScalarFieldEnum = {
  id: 'id',
  clauseId: 'clauseId',
  year: 'year',
  amount: 'amount',
  type: 'type'
};

exports.Prisma.AgentScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  agencyName: 'agencyName',
  reputation: 'reputation',
  yearsOfExperience: 'yearsOfExperience'
};

exports.Prisma.RatingScalarFieldEnum = {
  id: 'id',
  playerId: 'playerId',
  speed: 'speed',
  acceleration: 'acceleration',
  agility: 'agility',
  changeOfDirection: 'changeOfDirection',
  strength: 'strength',
  impactPower: 'impactPower',
  verticalJump: 'verticalJump',
  stamina: 'stamina',
  toughness: 'toughness',
  awareness: 'awareness',
  discipline: 'discipline',
  injuryRecovery: 'injuryRecovery',
  throwPower: 'throwPower',
  throwAccuracyShort: 'throwAccuracyShort',
  throwAccuracyMedium: 'throwAccuracyMedium',
  throwAccuracyDeep: 'throwAccuracyDeep',
  throwOnRun: 'throwOnRun',
  playAction: 'playAction',
  pocketPresence: 'pocketPresence',
  releaseTime: 'releaseTime',
  decisionMaking: 'decisionMaking',
  scrambling: 'scrambling',
  breakSack: 'breakSack',
  fieldVision: 'fieldVision',
  ballSecurity: 'ballSecurity',
  ballCarrierVision: 'ballCarrierVision',
  breakTackle: 'breakTackle',
  topBallCarrierSpeed: 'topBallCarrierSpeed',
  trucking: 'trucking',
  elusiveness: 'elusiveness',
  stiffArm: 'stiffArm',
  spinMove: 'spinMove',
  jukeMove: 'jukeMove',
  shortYardage: 'shortYardage',
  goalLine: 'goalLine',
  openFieldRunning: 'openFieldRunning',
  catching: 'catching',
  catchInTraffic: 'catchInTraffic',
  spectacularCatch: 'spectacularCatch',
  contestedCatches: 'contestedCatches',
  yardsAfterCatch: 'yardsAfterCatch',
  jumpBallTiming: 'jumpBallTiming',
  routeRunning: 'routeRunning',
  shortRoute: 'shortRoute',
  mediumRoute: 'mediumRoute',
  deepRoute: 'deepRoute',
  separation: 'separation',
  release: 'release',
  runBlocking: 'runBlocking',
  passBlocking: 'passBlocking',
  pullBlocking: 'pullBlocking',
  scrambleBlocking: 'scrambleBlocking',
  playActionBlocking: 'playActionBlocking',
  screenBlocking: 'screenBlocking',
  leadBlocking: 'leadBlocking',
  tackling: 'tackling',
  blockShedding: 'blockShedding',
  blitzing: 'blitzing',
  playRecognition: 'playRecognition',
  openFieldTackling: 'openFieldTackling',
  coverageAgainstTEsRBs: 'coverageAgainstTEsRBs',
  coverageAgainstSlot: 'coverageAgainstSlot',
  deepCoverage: 'deepCoverage',
  runDefense: 'runDefense',
  passRush: 'passRush',
  finessePassRush: 'finessePassRush',
  powerPassRush: 'powerPassRush',
  runStopping: 'runStopping',
  penetration: 'penetration',
  edgeSetting: 'edgeSetting',
  disengagement: 'disengagement',
  offensiveLineRecognition: 'offensiveLineRecognition',
  hitPower: 'hitPower',
  pressCoverage: 'pressCoverage',
  offBallCoverage: 'offBallCoverage',
  manCoverage: 'manCoverage',
  zoneCoverage: 'zoneCoverage',
  ballHawking: 'ballHawking',
  interceptions: 'interceptions',
  passDeflection: 'passDeflection',
  kickPower: 'kickPower',
  kickAccuracy: 'kickAccuracy',
  puntPower: 'puntPower',
  puntAccuracy: 'puntAccuracy',
  onsideKickAbility: 'onsideKickAbility',
  kickReturnVision: 'kickReturnVision',
  puntReturnVision: 'puntReturnVision'
};

exports.Prisma.StatScalarFieldEnum = {
  id: 'id',
  season: 'season',
  playerId: 'playerId',
  gamesPlayed: 'gamesPlayed',
  gamesStarted: 'gamesStarted',
  snaps: 'snaps',
  rushingAttempts: 'rushingAttempts',
  rushingYards: 'rushingYards',
  yardsPerCarry: 'yardsPerCarry',
  yardsAfterContact: 'yardsAfterContact',
  yardsPerGame: 'yardsPerGame',
  rushingLong: 'rushingLong',
  rushingTouchdowns: 'rushingTouchdowns',
  fumblesLost: 'fumblesLost',
  receptions: 'receptions',
  receivingYards: 'receivingYards',
  yardsPerReception: 'yardsPerReception',
  yardsAfterCatch: 'yardsAfterCatch',
  yardsPerTarget: 'yardsPerTarget',
  airYards: 'airYards',
  receivingLong: 'receivingLong',
  targets: 'targets',
  receivingTouchdowns: 'receivingTouchdowns',
  drops: 'drops',
  passingAttempts: 'passingAttempts',
  passingCompletions: 'passingCompletions',
  passingYards: 'passingYards',
  yardsPerPass: 'yardsPerPass',
  yardsPerCompletion: 'yardsPerCompletion',
  completionPercentage: 'completionPercentage',
  passingTouchdowns: 'passingTouchdowns',
  interceptions: 'interceptions',
  sacksTaken: 'sacksTaken',
  passerRating: 'passerRating',
  pancakes: 'pancakes',
  sacksAllowed: 'sacksAllowed',
  hurriesAllowed: 'hurriesAllowed',
  tackles: 'tackles',
  tacklesForLoss: 'tacklesForLoss',
  sacks: 'sacks',
  interceptionsMade: 'interceptionsMade',
  forcedFumbles: 'forcedFumbles',
  fumbleRecoveries: 'fumbleRecoveries',
  passesDefended: 'passesDefended',
  defensiveTouchdowns: 'defensiveTouchdowns',
  fieldGoalsMade: 'fieldGoalsMade',
  fieldGoalsAttempted: 'fieldGoalsAttempted',
  extraPointsMade: 'extraPointsMade',
  extraPointsAttempted: 'extraPointsAttempted',
  punts: 'punts',
  puntYards: 'puntYards',
  kickReturns: 'kickReturns',
  kickReturnYards: 'kickReturnYards',
  puntReturns: 'puntReturns',
  puntReturnYards: 'puntReturnYards',
  specialTeamsTouchdowns: 'specialTeamsTouchdowns',
  penaltiesCommitted: 'penaltiesCommitted',
  penaltyYards: 'penaltyYards'
};

exports.Prisma.ContractDesiresScalarFieldEnum = {
  id: 'id',
  years: 'years',
  averageSalary: 'averageSalary',
  totalGuaranteed: 'totalGuaranteed',
  bonuses: 'bonuses',
  tradeClause: 'tradeClause',
  injuryGuarantee: 'injuryGuarantee',
  rosterBonus: 'rosterBonus',
  workoutBonus: 'workoutBonus',
  incentives: 'incentives',
  optOutYears: 'optOutYears',
  isPlayerOptOut: 'isPlayerOptOut',
  isTeamOptOut: 'isTeamOptOut',
  playerId: 'playerId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.PlayerPositionEnum = exports.$Enums.PlayerPositionEnum = {
  QB: 'QB',
  RB: 'RB',
  FB: 'FB',
  WR: 'WR',
  TE: 'TE',
  LT: 'LT',
  LG: 'LG',
  C: 'C',
  RG: 'RG',
  RT: 'RT',
  DE: 'DE',
  DT: 'DT',
  NT: 'NT',
  EDGE: 'EDGE',
  LB: 'LB',
  MLB: 'MLB',
  OLB: 'OLB',
  ILB: 'ILB',
  CB: 'CB',
  FS: 'FS',
  SS: 'SS',
  K: 'K',
  P: 'P',
  LS: 'LS',
  KR: 'KR',
  PR: 'PR'
};

exports.PlayerRoleEnum = exports.$Enums.PlayerRoleEnum = {
  STARTER: 'STARTER',
  ROLE_PLAYER: 'ROLE_PLAYER',
  BACKUP: 'BACKUP',
  SPECIAL_TEAMS: 'SPECIAL_TEAMS',
  MENTOR: 'MENTOR'
};

exports.InjuryTypeEnum = exports.$Enums.InjuryTypeEnum = {
  Concussion: 'Concussion',
  NeckStrain: 'NeckStrain',
  Stinger: 'Stinger',
  ShoulderDislocation: 'ShoulderDislocation',
  RotatorCuffTear: 'RotatorCuffTear',
  BrokenCollarbone: 'BrokenCollarbone',
  ACJointSprain: 'ACJointSprain',
  ElbowSprain: 'ElbowSprain',
  BrokenArm: 'BrokenArm',
  WristFracture: 'WristFracture',
  DislocatedFinger: 'DislocatedFinger',
  BrokenFinger: 'BrokenFinger',
  ThumbSprain: 'ThumbSprain',
  RibFracture: 'RibFracture',
  AbdominalStrain: 'AbdominalStrain',
  Hernia: 'Hernia',
  LowerBackStrain: 'LowerBackStrain',
  HipPointer: 'HipPointer',
  GroinStrain: 'GroinStrain',
  HamstringStrain: 'HamstringStrain',
  QuadStrain: 'QuadStrain',
  KneeSprain: 'KneeSprain',
  ACLTear: 'ACLTear',
  MCLTear: 'MCLTear',
  LCLTear: 'LCLTear',
  PCLTear: 'PCLTear',
  MeniscusTear: 'MeniscusTear',
  PatellarTendinitis: 'PatellarTendinitis',
  AnkleSprain: 'AnkleSprain',
  HighAnkleSprain: 'HighAnkleSprain',
  AchillesTear: 'AchillesTear',
  TurfToe: 'TurfToe',
  BrokenFoot: 'BrokenFoot',
  ToeFracture: 'ToeFracture',
  Contusion: 'Contusion',
  Cramping: 'Cramping',
  Fatigue: 'Fatigue',
  Dehydration: 'Dehydration'
};

exports.ContractNegotiationStatusEnum = exports.$Enums.ContractNegotiationStatusEnum = {
  NotStarted: 'NotStarted',
  InProgress: 'InProgress',
  OfferMade: 'OfferMade',
  OfferRejected: 'OfferRejected',
  OfferAccepted: 'OfferAccepted',
  CounterOffer: 'CounterOffer',
  Completed: 'Completed',
  Withdrawn: 'Withdrawn',
  Expired: 'Expired',
  Stalled: 'Stalled',
  Failed: 'Failed'
};

exports.FootballRecordEnum = exports.$Enums.FootballRecordEnum = {
  CareerPassingYards: 'CareerPassingYards',
  CareerPassingTouchdowns: 'CareerPassingTouchdowns',
  SingleSeasonPassingYards: 'SingleSeasonPassingYards',
  SingleSeasonPassingTouchdowns: 'SingleSeasonPassingTouchdowns',
  SingleGamePassingYards: 'SingleGamePassingYards',
  SingleGamePassingTouchdowns: 'SingleGamePassingTouchdowns',
  CareerRushingYards: 'CareerRushingYards',
  CareerRushingTouchdowns: 'CareerRushingTouchdowns',
  SingleSeasonRushingYards: 'SingleSeasonRushingYards',
  SingleSeasonRushingTouchdowns: 'SingleSeasonRushingTouchdowns',
  SingleGameRushingYards: 'SingleGameRushingYards',
  SingleGameRushingTouchdowns: 'SingleGameRushingTouchdowns',
  CareerReceivingYards: 'CareerReceivingYards',
  CareerReceivingTouchdowns: 'CareerReceivingTouchdowns',
  SingleSeasonReceivingYards: 'SingleSeasonReceivingYards',
  SingleSeasonReceivingTouchdowns: 'SingleSeasonReceivingTouchdowns',
  SingleGameReceivingYards: 'SingleGameReceivingYards',
  SingleGameReceivingTouchdowns: 'SingleGameReceivingTouchdowns',
  CareerSacks: 'CareerSacks',
  CareerInterceptions: 'CareerInterceptions',
  SingleSeasonSacks: 'SingleSeasonSacks',
  SingleSeasonInterceptions: 'SingleSeasonInterceptions',
  SingleGameSacks: 'SingleGameSacks',
  SingleGameInterceptions: 'SingleGameInterceptions',
  LongestFieldGoal: 'LongestFieldGoal',
  MostFieldGoalsSingleGame: 'MostFieldGoalsSingleGame',
  MostFieldGoalsSeason: 'MostFieldGoalsSeason',
  CareerFieldGoalsMade: 'CareerFieldGoalsMade',
  LongestKickReturn: 'LongestKickReturn',
  LongestPuntReturn: 'LongestPuntReturn',
  MostKickReturnTouchdowns: 'MostKickReturnTouchdowns',
  MostPuntReturnTouchdowns: 'MostPuntReturnTouchdowns',
  LongestWinStreak: 'LongestWinStreak',
  MostWinsSeason: 'MostWinsSeason',
  MostPointsScoredSeason: 'MostPointsScoredSeason',
  MostPointsScoredGame: 'MostPointsScoredGame',
  MostGamesPlayed: 'MostGamesPlayed',
  MostProBowls: 'MostProBowls',
  MostMVPs: 'MostMVPs',
  MostChampionships: 'MostChampionships'
};

exports.PlayerPersonalityTraitEnum = exports.$Enums.PlayerPersonalityTraitEnum = {
  Leader: 'Leader',
  HardWorker: 'HardWorker',
  Lazy: 'Lazy',
  Coachable: 'Coachable',
  Uncoachable: 'Uncoachable',
  Perfectionist: 'Perfectionist',
  Slacker: 'Slacker',
  Mentor: 'Mentor',
  Respected: 'Respected',
  Delegator: 'Delegator',
  Micromanager: 'Micromanager',
  Punctual: 'Punctual',
  ChronicallyLate: 'ChronicallyLate',
  Humble: 'Humble',
  Arrogant: 'Arrogant',
  Diva: 'Diva',
  TeamPlayer: 'TeamPlayer',
  Selfish: 'Selfish',
  FameDriven: 'FameDriven',
  MoneyDriven: 'MoneyDriven',
  GloryHunter: 'GloryHunter',
  Loyal: 'Loyal',
  Disloyal: 'Disloyal',
  Entitled: 'Entitled',
  SelfMotivated: 'SelfMotivated',
  NeedsValidation: 'NeedsValidation',
  PeoplePleaser: 'PeoplePleaser',
  ClutchPerformer: 'ClutchPerformer',
  Choker: 'Choker',
  Inconsistent: 'Inconsistent',
  GameChanger: 'GameChanger',
  Dependable: 'Dependable',
  MomentumPlayer: 'MomentumPlayer',
  ConfidenceDriven: 'ConfidenceDriven',
  PressureResistant: 'PressureResistant',
  Overthinks: 'Overthinks',
  GameManager: 'GameManager',
  Disruptive: 'Disruptive',
  LockerRoomCancer: 'LockerRoomCancer',
  Mediator: 'Mediator',
  Comedian: 'Comedian',
  SilentProfessional: 'SilentProfessional',
  DramaSeeker: 'DramaSeeker',
  TeamDad: 'TeamDad',
  Bully: 'Bully',
  Instigator: 'Instigator',
  Unifier: 'Unifier',
  PartyAnimal: 'PartyAnimal',
  CleanLiving: 'CleanLiving',
  RuleFollower: 'RuleFollower',
  RuleBreaker: 'RuleBreaker',
  Focused: 'Focused',
  Distracted: 'Distracted',
  OffFieldIssues: 'OffFieldIssues',
  MediaTrained: 'MediaTrained',
  Reckless: 'Reckless',
  StraightEdge: 'StraightEdge',
  WorkLifeBalanced: 'WorkLifeBalanced',
  Overworked: 'Overworked',
  NightOwl: 'NightOwl',
  EarlyRiser: 'EarlyRiser',
  HighFootballIQ: 'HighFootballIQ',
  LowFootballIQ: 'LowFootballIQ',
  FilmJunkie: 'FilmJunkie',
  Unprepared: 'Unprepared',
  Studious: 'Studious',
  Forgetful: 'Forgetful',
  SystemThinker: 'SystemThinker',
  Instinctive: 'Instinctive',
  VisualLearner: 'VisualLearner',
  NeedsRepetition: 'NeedsRepetition',
  InjuryProne: 'InjuryProne',
  Durable: 'Durable',
  SlowStarter: 'SlowStarter',
  HotStarter: 'HotStarter',
  AlwaysWarmedUp: 'AlwaysWarmedUp',
  StrugglesWithConditioning: 'StrugglesWithConditioning',
  BodyLanguageProblem: 'BodyLanguageProblem',
  VocalMotivator: 'VocalMotivator',
  FanFavorite: 'FanFavorite',
  MediaDarling: 'MediaDarling',
  MediaNightmare: 'MediaNightmare',
  Marketable: 'Marketable',
  Forgettable: 'Forgettable',
  SocialMediaSavvy: 'SocialMediaSavvy',
  BrandBuilder: 'BrandBuilder',
  AntiMedia: 'AntiMedia',
  ReluctantStar: 'ReluctantStar',
  Flashy: 'Flashy',
  WantsChampionships: 'WantsChampionships',
  WantsStats: 'WantsStats',
  WantsLegacy: 'WantsLegacy',
  RingChaser: 'RingChaser',
  CareerFocused: 'CareerFocused',
  FamilyFocused: 'FamilyFocused',
  PassionForGame: 'PassionForGame',
  WantsToCoach: 'WantsToCoach',
  WantsOut: 'WantsOut',
  LookingForNextContract: 'LookingForNextContract',
  Resilient: 'Resilient',
  Moody: 'Moody',
  Calm: 'Calm',
  ShortTempered: 'ShortTempered',
  Anxious: 'Anxious',
  Optimist: 'Optimist',
  Pessimist: 'Pessimist',
  Adaptable: 'Adaptable',
  SystemDependent: 'SystemDependent',
  ThrivesInChaos: 'ThrivesInChaos',
  NeedsStructure: 'NeedsStructure'
};

exports.OffFieldConcernTypeEnum = exports.$Enums.OffFieldConcernTypeEnum = {
  LegalTrouble: 'LegalTrouble',
  BehavioralIssues: 'BehavioralIssues',
  CommitmentConcerns: 'CommitmentConcerns',
  MediaDistractions: 'MediaDistractions',
  LockerRoomTension: 'LockerRoomTension',
  CoachingConflict: 'CoachingConflict',
  SubstanceIssues: 'SubstanceIssues',
  MotivationConcerns: 'MotivationConcerns',
  ConditioningIssues: 'ConditioningIssues',
  ReputationRisk: 'ReputationRisk',
  ContractDispute: 'ContractDispute',
  AgentConflict: 'AgentConflict',
  MaturityQuestions: 'MaturityQuestions',
  FocusConcerns: 'FocusConcerns'
};

exports.PlayerEventEnum = exports.$Enums.PlayerEventEnum = {
  BirthOfChild: 'BirthOfChild',
  Married: 'Married',
  CharityRecognition: 'CharityRecognition',
  PersonalMilestone: 'PersonalMilestone',
  MediaPraise: 'MediaPraise',
  InjuryRecovery: 'InjuryRecovery',
  MediaDaySuccess: 'MediaDaySuccess',
  RevengeGameSuccess: 'RevengeGameSuccess',
  NewAgent: 'NewAgent',
  RoleChange: 'RoleChange',
  LegalTrouble: 'LegalTrouble',
  FamilyIllness: 'FamilyIllness',
  PersonalLoss: 'PersonalLoss',
  MediaScandal: 'MediaScandal',
  MediaCriticism: 'MediaCriticism',
  Suspension: 'Suspension',
  ContractHoldout: 'ContractHoldout',
  TradeRequest: 'TradeRequest',
  OffFieldIncident: 'OffFieldIncident',
  DraftedHigh: 'DraftedHigh',
  BreakoutSeason: 'BreakoutSeason',
  WonAward: 'WonAward',
  AllProSelection: 'AllProSelection',
  MVP: 'MVP',
  ProBowl: 'ProBowl',
  SuperBowlWin: 'SuperBowlWin',
  RecordBroken: 'RecordBroken',
  ContractExtension: 'ContractExtension',
  BigContractSigning: 'BigContractSigning',
  PlayerOfTheWeek: 'PlayerOfTheWeek',
  PlayerOfTheMonth: 'PlayerOfTheMonth',
  BigGamePerformance: 'BigGamePerformance',
  NewCareerHigh: 'NewCareerHigh',
  NewTeamConnection: 'NewTeamConnection',
  ContractYear: 'ContractYear',
  ApproachingFreeAgency: 'ApproachingFreeAgency',
  ApproachingRetirement: 'ApproachingRetirement',
  Traded: 'Traded',
  Benched: 'Benched',
  Injured: 'Injured',
  MajorInjury: 'MajorInjury',
  MinorInjury: 'MinorInjury',
  Released: 'Released',
  CutFromTeam: 'CutFromTeam',
  LostStartingJob: 'LostStartingJob',
  ContractDispute: 'ContractDispute',
  DroppedInDraft: 'DroppedInDraft',
  TeamChampionship: 'TeamChampionship',
  CoachPraise: 'CoachPraise',
  NewQBConnection: 'NewQBConnection',
  TeamChemistry: 'TeamChemistry',
  TrainingCampSuccess: 'TrainingCampSuccess',
  NewTeamAcquisition: 'NewTeamAcquisition',
  TeamPlayoffRun: 'TeamPlayoffRun',
  TrainingCampBuzz: 'TrainingCampBuzz',
  TrainingCampBattle: 'TrainingCampBattle',
  StadiumRenovation: 'StadiumRenovation',
  NewTeamFacilities: 'NewTeamFacilities',
  TrainingCampStart: 'TrainingCampStart',
  TeamCollapse: 'TeamCollapse',
  CoachFired: 'CoachFired',
  CoachingChange: 'CoachingChange',
  LockerRoomDrama: 'LockerRoomDrama',
  MissedPlayoffs: 'MissedPlayoffs',
  TeammateDeparture: 'TeammateDeparture',
  TradeRumors: 'TradeRumors',
  LostPlayoffGame: 'LostPlayoffGame',
  LostSuperBowl: 'LostSuperBowl',
  TeamRebuilding: 'TeamRebuilding',
  TeamRelocation: 'TeamRelocation',
  TeamStruggles: 'TeamStruggles'
};

exports.DivisionEnum = exports.$Enums.DivisionEnum = {
  AFC_EAST: 'AFC_EAST',
  AFC_NORTH: 'AFC_NORTH',
  AFC_SOUTH: 'AFC_SOUTH',
  AFC_WEST: 'AFC_WEST',
  NFC_EAST: 'NFC_EAST',
  NFC_NORTH: 'NFC_NORTH',
  NFC_SOUTH: 'NFC_SOUTH',
  NFC_WEST: 'NFC_WEST'
};

exports.ConferenceEnum = exports.$Enums.ConferenceEnum = {
  AFC: 'AFC',
  NFC: 'NFC'
};

exports.OffensiveSchemeEnum = exports.$Enums.OffensiveSchemeEnum = {
  WEST_COAST: 'WEST_COAST',
  AIR_RAID: 'AIR_RAID',
  PRO_STYLE: 'PRO_STYLE',
  WILDCAT: 'WILDCAT',
  SPREAD: 'SPREAD',
  POWER_RUN: 'POWER_RUN',
  ZONE_RUN: 'ZONE_RUN',
  BALANCED: 'BALANCED',
  PISTOL: 'PISTOL',
  RUN_AND_SHOOT: 'RUN_AND_SHOOT'
};

exports.DefensiveSchemeEnum = exports.$Enums.DefensiveSchemeEnum = {
  FOUR_THREE: 'FOUR_THREE',
  THREE_FOUR: 'THREE_FOUR',
  HYBRID: 'HYBRID',
  NICKEL_BASED: 'NICKEL_BASED',
  COVER_2: 'COVER_2',
  COVER_3: 'COVER_3',
  MULTIPLE: 'MULTIPLE',
  MAN_BLITZ_HEAVY: 'MAN_BLITZ_HEAVY',
  ZONE_HEAVY: 'ZONE_HEAVY'
};

exports.FinancialHealthEnum = exports.$Enums.FinancialHealthEnum = {
  EXCELLENT: 'EXCELLENT',
  GOOD: 'GOOD',
  MODERATE: 'MODERATE',
  POOR: 'POOR'
};

exports.OptionType = exports.$Enums.OptionType = {
  TEAM: 'TEAM',
  PLAYER: 'PLAYER'
};

exports.Prisma.ModelName = {
  Player: 'Player',
  Team: 'Team',
  PlayerContract: 'PlayerContract',
  ContractBonus: 'ContractBonus',
  SalaryByYear: 'SalaryByYear',
  CapHitByYear: 'CapHitByYear',
  DeadCapByYear: 'DeadCapByYear',
  OptOutYear: 'OptOutYear',
  RestructureEvent: 'RestructureEvent',
  ContractClause: 'ContractClause',
  PerformanceBonus: 'PerformanceBonus',
  StatMilestone: 'StatMilestone',
  RosterBonus: 'RosterBonus',
  WorkoutBonus: 'WorkoutBonus',
  OptionBonus: 'OptionBonus',
  Agent: 'Agent',
  Rating: 'Rating',
  Stat: 'Stat',
  ContractDesires: 'ContractDesires'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
